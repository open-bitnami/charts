name: "[CI/CD] Charts publish"

on:
  workflow_call:
    inputs:
      matrix:
        description: 'Stringified JSON: {"include":[ ... ]}'
        required: true
        type: string

env:
  REGISTRY: ghcr.io

jobs:
  publish:
    name: Package & publish ${{ matrix.chart }} (${{ matrix.context }})
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(inputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Fetch base branch ref
        if: github.event_name == 'pull_request'
        run: |
          git fetch origin +refs/heads/${{ github.event.pull_request.base.ref }}:refs/remotes/origin/${{ github.event.pull_request.base.ref }}

      - name: Set up Helm 3
        uses: azure/setup-helm@v4
        with:
          version: v3.14.4

      - name: Compute registry repo
        id: repo
        uses: actions/github-script@v7
        env:
          REGISTRY: ${{ env.REGISTRY }}
          REPOSITORY: ${{ github.repository }}
        with:
          result-encoding: string
          script: |
            const [owner] = process.env.REPOSITORY.toLowerCase().split('/');
            return `${process.env.REGISTRY}/${owner}/charts`;

      # - name: Install chart-testing (ct)
      #   if: github.event_name == 'pull_request'
      #   uses: helm/chart-testing-action@v2.6.1
      # - name: Create kind cluster
      #   if: github.event_name == 'pull_request'
      #   uses: helm/kind-action@v1.10.0
      # - name: Run chart-testing (lint)
      #   if: github.event_name == 'pull_request'
      #   run: ct lint --target-branch "${{ github.event.pull_request.base.ref }}" --charts "${{ matrix.context }}"
      # - name: Run chart-testing (install)
      #   if: github.event_name == 'pull_request'
      #   run: ct install --target-branch "${{ github.event.pull_request.base.ref }}" --charts "${{ matrix.context }}"

      - name: Build chart dependencies
        working-directory: ${{ matrix.context }}
        run: helm dependency build

      - name: Package chart
        id: pkg
        run: |
          mkdir -p /tmp/chartpkg
          helm package "${{ matrix.context }}" --destination /tmp/chartpkg
          pkg="$(ls -1 /tmp/chartpkg/*.tgz | head -n1)"
          echo "path=$pkg" >> $GITHUB_OUTPUT

      - name: Log in to GHCR for Helm
        if: github.event_name != 'pull_request'
        env:
          CR_PAT: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "$CR_PAT" | helm registry login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Push chart to OCI (GHCR)
        if: github.event_name != 'pull_request'
        run: |
          # Per Helm OCI, reference must be oci://<registry>/<repo> (no name/version)
          # Name and version are taken from the packaged chart. 
          helm push "${{ steps.pkg.outputs.path }}" "oci://${{ steps.repo.outputs.result }}"
